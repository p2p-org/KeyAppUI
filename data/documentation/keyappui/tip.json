{"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"UI Component to indicate something for user. For instance, onboarding or new feature release."}]},{"anchor":"Usage","level":2,"type":"heading","text":"Usage"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There is a class called "},{"type":"strong","inlineContent":[{"type":"text","text":"TipManager"}]},{"type":"text","text":". Use it to create a tip with your content and stylization. Implement "},{"type":"strong","inlineContent":[{"type":"text","text":"TipManagerDelegate"}]},{"type":"text","text":" to react to buttons."}]},{"anchor":"TipManager","level":3,"type":"heading","text":"TipManager"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Initialize it."}]},{"type":"codeListing","syntax":"swift","code":["private lazy var tipManager: TipManager = {","    let tipManager = TipManager()","    tipManager.delegate = self","    return tipManager","}()"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a tip."},{"type":"text","text":" "},{"type":"text","text":"You are responsible to add tip as a subview and positionate it properly. Example:"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You need to pass three parameters:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"TipComponent. This struct represents a content inside a tip."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"TipTheme. It is an enum for tip style. Can be night, snow and lime."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"TipPointerPosition. A pointer can be flexible put with 12 different options. There is also an option to not use it. Just pass "},{"type":"codeVoice","code":".none"},{"type":"text","text":"."}]}]}]},{"type":"codeListing","syntax":"swift","code":["let tip = tipManager.createTip(content: createTipContent(number: 1, count: 5), theme: .night, pointerPosition: .topRight)","view.addSubview(nextTip)","nextTip.autoPinEdge(.top, to: .bottom, of: firstButton, withOffset: 4)","nextTip.autoPinEdge(.leading, to: .leading, of: view, withOffset: 4)"]},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Warning: creation methods returns UIView"}]}]},{"anchor":"TipManagerDelegate","level":3,"type":"heading","text":"TipManagerDelegate"},{"type":"codeListing","syntax":"swift","code":["public protocol TipManagerDelegate: AnyObject {","    func next(after number: Int)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Respond to button action. A tip has two buttons: Next and Skip (buttonsâ€™ titles are customizable). Skip button is quite clear - it hides current tip and does not call next action. As it methioned above that you are responsible to add tip as a subview, "},{"type":"codeVoice","code":"next"},{"type":"text","text":" method is perfect for constracting them in correct order next to correct subviews. If user presses on "},{"type":"codeVoice","code":"next"},{"type":"text","text":" button with the last current number, tip hides automatically."}]},{"type":"codeListing","syntax":"swift","code":["func next(after number: Int) {","    let nextTip: UIView","    switch number {","    case 1:","        nextTip = tipManager.createTip(content: createTipContent(number: 2, count: 5), theme: .snow, pointerPosition: .rightCenter)","        view.addSubview(nextTip)","        nextTip.autoPinEdge(.trailing, to: .leading, of: secondLabel, withOffset: -4)","        nextTip.autoAlignAxis(.horizontal, toSameAxisOf: secondLabel)","    case 2:","        nextTip = tipManager.createTip(content: createTipContent(number: 3, count: 5), theme: .lime, pointerPosition: .bottomLeft)","        view.addSubview(nextTip)","        nextTip.autoPinEdge(.bottom, to: .top, of: thirdLabel, withOffset: -4)","        nextTip.autoPinEdge(.leading, to: .leading, of: thirdLabel, withOffset: -16)","    default:","        fatalError()","    }","    nextTip.autoSetDimension(.width, toSize: 250, relation: .lessThanOrEqual)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"TipExampleViewController demonstrates usage."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/keyappui\/tip"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/KeyAppUI\/documentation\/KeyAppUI\/Tip","interfaceLanguage":"swift"},"abstract":[{"type":"image","identifier":"Tip.png"}],"kind":"article","metadata":{"roleHeading":"Article","title":"Tip","role":"article","modules":[{"name":"KeyAppUI"}]},"hierarchy":{"paths":[["doc:\/\/KeyAppUI\/documentation\/KeyAppUI"]]},"references":{"Tip.png":{"alt":"Tip","type":"image","identifier":"Tip.png","variants":[{"url":"\/images\/Tip.png","traits":["1x","light"]},{"url":"\/images\/Tip@2x.png","traits":["2x","light"]},{"url":"\/images\/Tip@3x.png","traits":["3x","light"]}]},"doc://KeyAppUI/documentation/KeyAppUI":{"role":"collection","title":"KeyAppUI","abstract":[{"type":"text","text":"This package contains UI components for KeyApp application."}],"identifier":"doc:\/\/KeyAppUI\/documentation\/KeyAppUI","kind":"symbol","type":"topic","url":"\/documentation\/keyappui"}}}